# 应用名称
spring.application.name=threadandjuc2
# 内存模式
spring.shardingsphere.mode.type=Memory
# 配置真实数据源
spring.shardingsphere.datasource.names=order0,user,order1

# 配置第 1 个数据源
spring.shardingsphere.datasource.user.type=com.zaxxer.hikari.HikariDataSource
spring.shardingsphere.datasource.user.driver-class-name=com.mysql.jdbc.Driver
spring.shardingsphere.datasource.user.jdbc-url=jdbc:mysql://192.168.112.100:3301/db_user
spring.shardingsphere.datasource.user.username=root
spring.shardingsphere.datasource.user.password=123456

# 配置第 2 个数据源
spring.shardingsphere.datasource.order0.type=com.zaxxer.hikari.HikariDataSource
spring.shardingsphere.datasource.order0.driver-class-name=com.mysql.jdbc.Driver
spring.shardingsphere.datasource.order0.jdbc-url=jdbc:mysql://192.168.112.100:3302/db_order
spring.shardingsphere.datasource.order0.username=root
spring.shardingsphere.datasource.order0.password=123456

# 配置第 3 个数据源
spring.shardingsphere.datasource.order1.type=com.zaxxer.hikari.HikariDataSource
spring.shardingsphere.datasource.order1.driver-class-name=com.mysql.jdbc.Driver
spring.shardingsphere.datasource.order1.jdbc-url=jdbc:mysql://192.168.112.100:3310/db_order
spring.shardingsphere.datasource.order1.username=root
spring.shardingsphere.datasource.order1.password=123456
# spring.shardingsphere.rules.sharding.tables.<table-name>.actual-data-nodes=值
# 值由数据源名 + 表名组成，以小数点分隔。多个表以逗号分隔，支持 inline 表达式。
# <table-name>：逻辑表名
spring.shardingsphere.rules.sharding.tables.t_user.actual-data-nodes=user.t_user
spring.shardingsphere.rules.sharding.tables.t_order.actual-data-nodes=order$->{0..1}.t_order$->{0..1}
spring.shardingsphere.rules.sharding.tables.t_dict.actual-data-nodes=user.t_dict,order$->{0..1}.t_dict

# hint 分库算法名称
spring.shardingsphere.rules.sharding.tables.t_order.database-strategy.hint.sharding-algorithm-name=my-hint

#HINT分片算法自定义算法实现，配置具体的分表的算法-自定义路由的策略
spring.shardingsphere.rules.sharding.sharding-algorithms.my-hint.type=CLASS_BASED
spring.shardingsphere.rules.sharding.sharding-algorithms.my-hint.props.strategy=hint
spring.shardingsphere.rules.sharding.sharding-algorithms.my-hint.props.algorithmClassName=com.juc.threadandjuc2.service.algorithm.IdSharingAlgorithm

#设置HINT强制路由分表策略
spring.shardingsphere.rules.sharding.tables.t_order.table-strategy.hint.sharding-algorithm-name=my-table-hint
#设置算法
spring.shardingsphere.rules.sharding.sharding-algorithms.my-table-hint.type=CLASS_BASED
spring.shardingsphere.rules.sharding.sharding-algorithms.my-table-hint.props.strategy=hint
spring.shardingsphere.rules.sharding.sharding-algorithms.my-table-hint.props.algorithmClassName=com.juc.threadandjuc2.service.algorithm.IdSharingAlgorithm



#------------------------分布式序列策略配置
# 分布式序列列名称
spring.shardingsphere.rules.sharding.tables.t_order.key-generate-strategy.column=id
# 分布式序列算法名称
spring.shardingsphere.rules.sharding.tables.t_order.key-generate-strategy.key-generator-name=alg_snowflake

# 分布式序列算法配置
# 分布式序列算法类型
spring.shardingsphere.rules.sharding.key-generators.alg_snowflake.type=SNOWFLAKE
# 分布式序列算法属性配置
# 分片id是id则可以配置
#spring.shardingsphere.rules.sharding.key-generators.alg_snowflake.props.xxx=

# 广播表
spring.shardingsphere.rules.sharding.broadcast-tables[0]=t_dict

# 打印SQL
spring.shardingsphere.props.sql-show=true